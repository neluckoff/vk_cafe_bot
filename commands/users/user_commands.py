from vkbottle.bot import Blueprint, Message
from vkbottle import CtxStorage
from data.keyboards import full_screen_menu, just_menu, more_info, back_to_start, person_keyboard, \
    input_phone, input_address, input_all, delivery_keyboard
from data.config import group_id, hight_admin
from misc.state_group import AddressState, Phone, Order
from misc.address import Address
from bot import mysql_connect
from commands.admins.admin_commands import online_admins
import datetime

bot = Blueprint("Only users chat command")
ctx = CtxStorage()


def get_banned(user_id: int):
    connection = mysql_connect()
    with connection.cursor() as cursor:
        cursor.execute(f"SELECT banned FROM users WHERE id = {user_id}")
        banned = cursor.fetchone()
        connection.commit()
    if banned[0] == 0:
        return False
    else:
        return True


def check_str(text: str):
    temp = '0123456789.+/=*'
    for value in text:
        if value in temp:
            return False
    return True


@bot.on.private_message(text=['–ù–∞—á–∞—Ç—å', '–ö—É', '–ü—Ä–∏–≤–µ—Ç' '/start'])
async def hello(message: Message):
    users_info = await bot.api.users.get(message.from_id)
    connection = mysql_connect()
    cursor = connection.cursor()
    cursor.execute(f"SELECT id FROM users WHERE id = {users_info[0].id}")
    if cursor.fetchone() is None:
        if users_info[0].id in hight_admin:
            name = f'{users_info[0].first_name} {users_info[0].last_name}'
            cursor.execute(f"INSERT INTO `users` (id, name, phone, address, num_orders, status, banned) "
                           f"VALUES ('{users_info[0].id}', '{name}', "
                           f"'empty', 'empty', 0, 'admin', 0);")
            connection.commit()
        else:
            name = f'{users_info[0].first_name} {users_info[0].last_name}'
            cursor.execute(f"INSERT INTO `users` (id, name, phone, address, num_orders, status, banned) "
                           f"VALUES ('{users_info[0].id}', '{name}', "
                           f"'empty', 'empty', 0, 'user', 0);")
            connection.commit()
    await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {}".format(users_info[0].first_name) + "!" +
                         "\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –±—É–¥—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–ª–∏ –∂–µ –Ω–∞–∂–º–∏—Ç–µ \"–ú–µ–Ω—é\" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                         keyboard=just_menu)


@bot.on.message(text=['–ú–µ–Ω—é', '/menu', 'üëàüèª –ù–∞–∑–∞–¥'])
async def hi_handler(message: Message):
    connection = mysql_connect()
    users_info = await bot.api.users.get(message.from_id)
    cursor = connection.cursor()
    cursor.execute(f"SELECT id FROM users WHERE id = {users_info[0].id}")
    if cursor.fetchone() is None:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ \"–ù–∞—á–∞—Ç—å\".", keyboard=back_to_start)
    else:
        await message.answer("–í—ã –≤—ã–∑–≤–∞–ª–∏ –º–µ–Ω—é.", keyboard=full_screen_menu)


@bot.on.message(text='–û –Ω–∞—Å')
async def hi_handler(message: Message):
    await message.answer("–ú—ã - –ª—É—á—à–µ–µ –∫–∞—Ñ–µ –Ω–∞ —Ä—ã–Ω–∫–µ –†–§.", keyboard=more_info)


@bot.on.message(text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
async def hi_handler(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!", keyboard=person_keyboard)


@bot.on.message(text='–ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω')
async def search_phone(message: Message):
    connection = mysql_connect()
    with connection.cursor() as cursor:
        users_info = await bot.api.users.get(message.from_id)
        cursor.execute(f"SELECT phone FROM users WHERE id = {users_info[0].id}")
        phone = str(cursor.fetchone()[0])
        if phone == 'empty':
            await message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω.", keyboard=input_phone)
        else:
            await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: " + phone)


@bot.on.message(text='–ú–æ–π –∞–¥—Ä–µ—Å')
async def search_address(message: Message):
    connection = mysql_connect()
    with connection.cursor() as cursor:
        users_info = await bot.api.users.get(message.from_id)
        cursor.execute(f"SELECT address FROM users WHERE id = {users_info[0].id}")
        address = str(cursor.fetchone()[0])
        if address == 'empty':
            await message.answer("–í—ã –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å.", keyboard=input_address)
        else:
            await message.answer("–í–∞—à –∞–¥—Ä–µ—Å: " + address)


@bot.on.message(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤')
async def search_orders(message: Message):
    connection = mysql_connect()
    with connection.cursor() as cursor:
        users_info = await bot.api.users.get(message.from_id)
        cursor.execute(f"SELECT num_orders FROM users WHERE id = {users_info[0].id}")
        orders = cursor.fetchone()[0]
        if orders == 0:
            await message.answer("–í—ã –ø–æ–∫–∞ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –Ω–∏ –µ–¥–∏–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É –Ω–∞—Å.")
        else:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤: " + str(orders))


@bot.on.private_message(text=['–°–≤—è–∑–∞—Ç—å—Å—è', '–í–æ–ø—Ä–æ—Å', '–ü–æ–º–æ—â—å'])
async def answer(message: Message):
    user = await bot.api.users.get(message.from_id)
    if not get_banned(user[0].id):
        if not online_admins:
            await message.answer('–ù–∏ –æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–µ—Ç–∏, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å.')
        else:
            await message.answer("–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å —è –≤—ã–∑–æ–≤—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")
            await bot.api.messages.send(peer_ids=online_admins,
                                        message=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [vk.com/id{user[0].id}|'
                                                f'{user[0].first_name} {user[0].last_name}]'
                                                f' —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!\n–û—Ç–≤–µ—Ç–∏—Ç—å: '
                                                f'vk.com/gim{group_id}?sel={user[0].id}', random_id=0)
    else:
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π.")


@bot.on.private_message(text='–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
async def handler(message: Message):
    await bot.state_dispenser.set(message.peer_id, Phone.NUMBER)
    return "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü—Ä–∏–º–µ—Ä: 89261231212"


@bot.on.private_message(state=Phone.NUMBER)
async def phone_funct(message: Message):
    ctx.set('phone', message.text)
    users_info = await bot.api.users.get(message.from_id)
    if len(ctx.get('phone')) == 11 and str(ctx.get('phone')).isdigit():
        phone = ctx.get('phone')
        if phone[0] == '8':
            new_phone = f'{phone[0]} ({phone[1]}{phone[2]}{phone[3]}) ' \
                        f'{phone[4]}{phone[5]}{phone[6]}-{phone[7]}{phone[8]}-{phone[9]}{phone[10]}'
        elif phone[0] == '7':
            new_phone = f'8 ({phone[1]}{phone[2]}{phone[3]}) ' \
                        f'{phone[4]}{phone[5]}{phone[6]}-{phone[7]}{phone[8]}-{phone[9]}{phone[10]}'
        await message.answer(f'–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' + new_phone)
        connection = mysql_connect()
        with connection.cursor() as cursor:
            update_query = f"UPDATE `users` SET phone = '{new_phone}' WHERE id = '{users_info[0].id}'"
            cursor.execute(update_query)
            connection.commit()
        await bot.state_dispenser.set(message.peer_id, Phone.END)
        return "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –µ—Å–ª–∏ –í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –µ—â–µ —Ä–∞–∑."
    else:
        await bot.state_dispenser.set(message.peer_id, Phone.END)
        return "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π –µ—â–µ —Ä–∞–∑."


@bot.on.private_message(text='–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å')
async def city(message: Message):
    await bot.state_dispenser.set(message.peer_id, AddressState.CITY)
    return "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥."


@bot.on.private_message(state=AddressState.CITY)
async def street(message: Message):
    if check_str(message.text):
        ctx.set('city', message.text)
        await bot.state_dispenser.set(message.peer_id, AddressState.STREET)
        return "–û—Ç–ª–∏—á–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å —É–ª–∏—Ü—É."
    else:
        return "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."


@bot.on.private_message(state=AddressState.STREET)
async def home(message: Message):
    if check_str(message.text):
        ctx.set('street', message.text)
        await bot.state_dispenser.set(message.peer_id, AddressState.HOME)
        return "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞ (–≤–∫–ª—é—á–∞—è –∫–æ—Ä–ø—É—Å –∏–ª–∏ —Å—Ç—Ä–æ–µ–Ω–∏–µ)."
    else:
        return "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."


@bot.on.private_message(state=AddressState.HOME)
async def flat(message: Message):
    ctx.set('home', message.text)
    await bot.state_dispenser.set(message.peer_id, AddressState.FLAT)
    return "–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã."


@bot.on.private_message(state=AddressState.FLAT)
async def doorphone(message: Message):
    ctx.set('flat', message.text)
    await bot.state_dispenser.set(message.peer_id, AddressState.DOORPHONE)
    return "–ê —Å–µ–π—á–∞—Å —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –¥–æ–º–æ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –∫–æ–¥–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É)."


@bot.on.private_message(state=AddressState.DOORPHONE)
async def floor(message: Message):
    ctx.set('doorphone', message.text)
    await bot.state_dispenser.set(message.peer_id, AddressState.FLOOR)
    return "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à—Ç—Ä–∏—Ö, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —ç—Ç–∞–∂."


@bot.on.private_message(state=AddressState.FLOOR)
async def address_end(message: Message):
    if message.text.isdigit():
        users_info = await bot.api.users.get(message.from_id)
        ctx.set('floor', message.text)
        address: Address = Address(ctx.get('city'), ctx.get('street'), ctx.get('home'), ctx.get('flat'),
                                   ctx.get('doorphone'), ctx.get('floor'))
        await message.answer(f'–í–∞—à –∞–¥—Ä–µ—Å: ' + address.to_string())
        connection = mysql_connect()
        with connection.cursor() as cursor:
            update_query = f"UPDATE `users` SET address = '{address.to_string()}' WHERE id = '{users_info[0].id}'"
            cursor.execute(update_query)
            connection.commit()
        await bot.state_dispenser.set(message.peer_id, AddressState.END)
        return "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –µ—Å–ª–∏ –í—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É, –ø–µ—Ä–µ–∑–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –µ—â–µ —Ä–∞–∑."
    else:
        return "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."


@bot.on.message(text='–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
async def make_order(message: Message):
    users_info = await bot.api.users.get(message.from_id)
    if not get_banned(users_info[0].id):
        connection = mysql_connect()
        with connection.cursor() as cursor:
            cursor.execute(f"SELECT phone FROM users WHERE id = {users_info[0].id}")
            phone = str(cursor.fetchone()[0])
            if phone == 'empty':
                await message.answer("–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", keyboard=input_phone)
                await bot.state_dispenser.set(message.peer_id, Order.END)
            else:
                await bot.state_dispenser.set(message.peer_id, Order.DELIVERY)
                await message.answer("–ö–∞–∫ –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–±–∏—Ä–∞—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑?", keyboard=delivery_keyboard)
    else:
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π.")


@bot.on.private_message(state=Order.DELIVERY)
async def delivery_info(message: Message):
    msg = message.text
    connection = mysql_connect()
    users_info = await bot.api.users.get(message.from_id)
    if msg == "–î–æ—Å—Ç–∞–≤–∫–∞":
        with connection.cursor() as cursor:
            cursor.execute(f"SELECT address FROM users WHERE id = {users_info[0].id}")
            address = str(cursor.fetchone()[0])
            if address == 'empty':
                await message.answer("–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.", keyboard=input_address)
                await bot.state_dispenser.set(message.peer_id, Order.END)
            else:
                await bot.state_dispenser.set(message.peer_id, Order.INFO_DEL)
                return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n1 –ø–∏—Ü—Ü–∞\n2 –∫–æ–ª—ã"
    elif msg == "–°–∞–º–æ–≤—ã–≤–æ–∑":
        await bot.state_dispenser.set(message.peer_id, Order.INFO_SAM)
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n1 –ø–∏—Ü—Ü–∞\n2 –∫–æ–ª—ã"


@bot.on.private_message(state=Order.INFO_DEL)
async def order_info_del(message: Message):
    order = message.text.replace(' \n', '|')
    now_date = datetime.datetime.now().strftime("%d-%m-%Y %H:%M")
    users_info = await bot.api.users.get(message.from_id)
    connection = mysql_connect()
    with connection.cursor() as cursor:
        cursor.execute(f"SELECT address FROM users WHERE id = {users_info[0].id}")
        address = str(cursor.fetchone()[0])
        cursor.execute(f"SELECT phone FROM users WHERE id = {users_info[0].id}")
        phone = str(cursor.fetchone()[0])
        connection.commit()
    with connection.cursor() as cursor:
        cursor.execute(f"SELECT order_id FROM orders")
        ids_orders = cursor.fetchall()
        last_num = 0
        for row in ids_orders:
            last_num = row[0] + 1
        name = users_info[0].first_name + ' ' + users_info[0].last_name
        cursor.execute(f"INSERT INTO `orders` (order_id, user_id, name, address, phone, date, order_list, completed) "
                       f"VALUES ('{last_num}', '{users_info[0].id}', '{name}',"
                       f"'{address}', '{phone}', '{now_date}', '{order}', '{0}');")
        connection.commit()
        await bot.state_dispenser.set(message.peer_id, Order.END)
    order_str = f"–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n‚Ññ: {last_num}\n{now_date}\n–û—Ç: {name}\n{address}\n" \
                f"–¢–µ–ª: {phone}\n{'#' * 20}\n{message.text}\n{'#' * 20}\n\n–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∏–∞–ª–æ–≥—É: " \
                f"vk.com/gim{group_id}?sel={users_info[0].id}"
    if not online_admins:
        await bot.api.messages.send(peer_id=hight_admin, message=order_str, random_id=0)
        await bot.api.messages.send(peer_id=hight_admin,
                                    message='‚ùó –í–∞–º –ø—Ä–∏—à–ª–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–µ—Ç–∏.',
                                    random_id=0)
    else:
        await bot.api.messages.send(peer_ids=online_admins, message=order_str, random_id=0)
    await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –ø–æ–¥ ‚Ññ:{last_num}\n–î–∞—Ç–∞: {now_date}\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
                         f"–¢–µ–ª: {phone}\n{'#' * 20}\n{message.text}\n{'#' * 20}\n\n"
                         f"–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


@bot.on.private_message(state=Order.INFO_SAM)
async def order_info_sam(message: Message):
    order = message.text.replace(' \n', '|')
    now_date = datetime.datetime.now().strftime("%d-%m-%Y %H:%M")
    users_info = await bot.api.users.get(message.from_id)
    connection = mysql_connect()
    with connection.cursor() as cursor:
        cursor.execute(f"SELECT phone FROM users WHERE id = {users_info[0].id}")
        phone = str(cursor.fetchone()[0])
        connection.commit()
    with connection.cursor() as cursor:
        last_num = 0
        cursor.execute(f"SELECT order_id FROM orders")
        ids_orders = cursor.fetchall()
        name = users_info[0].first_name + ' ' + users_info[0].last_name
        for row in ids_orders:
            last_num = row[0] + 1
        cursor.execute(f"INSERT INTO `orders` (order_id, user_id, name, address, phone, date, order_list, completed) "
                       f"VALUES ('{last_num}', '{users_info[0].id}', '{name}',"
                       f"'–°–∞–º–æ–≤—ã–≤–æ–∑', '{phone}', '{now_date}', '{order}', '{0}');")
        connection.commit()
        await bot.state_dispenser.set(message.peer_id, Order.END)
    order_str = f"–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n‚Ññ: {last_num}\n{now_date}\n–û—Ç: {name}\n–°–ê–ú–û–í–´–í–û–ó\n" \
                f"–¢–µ–ª: {phone}\n{'#' * 20}\n{message.text}\n{'#' * 20}\n\n–ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∏–∞–ª–æ–≥—É: " \
                f"vk.com/gim{group_id}?sel={users_info[0].id}"
    if not online_admins:
        await bot.api.messages.send(peer_id=hight_admin, message=order_str, random_id=0)
        await bot.api.messages.send(peer_id=hight_admin,
                                    message='‚ùó –í–∞–º –ø—Ä–∏—à–ª–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ—Ç –≤ —Å–µ—Ç–∏.',
                                    random_id=0)
    else:
        await bot.api.messages.send(peer_ids=online_admins, message=order_str, random_id=0)
    await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –ø–æ–¥ ‚Ññ:{last_num}\n–î–∞—Ç–∞: {now_date}\n–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: –°–∞–º–æ–≤—ã–≤–æ–∑\n"
                         f"–¢–µ–ª: {phone}\n{'#' * 20}\n{message.text}\n{'#' * 20}\n\n"
                         f"–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
